{"version":3,"sources":["stores/timer.js","stores/operations.js","components/ListOfOperations.jsx","components/Score.jsx","components/RightPanelForm.jsx","stores/user.js","components/StartGame.jsx","components/InfoGameStart.jsx","App.js","stores/store.js","serviceWorker.js","index.js"],"names":["timerSlice","createSlice","name","initialState","time","interval","undefined","endGame","reducers","decremente","state","clearInterval","initInternval","action","payload","initTime","extraReducers","actions","timeState","timer","isEndGame","operationSlice","all","isEmpty","score","startOperation","operation","addOperation","responseIsSuccess","success","responseIsFail","nb1","makeRandomNumber","nb2","response","multiply","text","end","operationsState","operations","getFirstResponse","length","ListOfOperations","useSelector","isEnd","attributClass","index","className","map","key","Score","RightPanelForm","textInput","createRef","firstResponse","dispatch","useDispatch","useState","result","setresult","onSubmit","event","preventDefault","current","focus","resultNumber","parseInt","type","step","min","max","autoFocus","autoComplete","ref","onChange","target","value","htmlFor","userSlice","id","isLoading","pseudo","usersLoading","loading","console","log","usersReceived","userState","user","StartGame","setPseudo","launchGame","a","Axios","post","status","data","setInterval","fetchUsers","maxLength","required","disabled","trim","InfoGameStart","Component","App","data-testid","href","packageJson","author","url","configureStore","reducer","Boolean","window","location","hostname","match","defaults","baseURL","process","BUILD_ENV","homepage","devUrl","node","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b12c0666.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst TIME_GAME = 30;\n\nexport const timerSlice = createSlice({\n  name: \"timer\",\n  initialState: {\n    time: TIME_GAME,\n    interval: undefined,\n    endGame: false,\n  },\n  reducers: {\n    decremente: (state) => {\n      if (state.time > 0) {\n        state.time--;\n      } else {\n        state.endGame = true;\n        clearInterval(state.interval);\n      }\n    },\n    initInternval: (state, action) => {\n      state.interval = action.payload;\n    },\n    initTime: (state) => {\n      state.endGame = false;\n      state.time = TIME_GAME;\n    },\n  },\n  extraReducers: {},\n});\n\n// Methode\nexport const { decremente, initInternval, initTime } = timerSlice.actions;\n\n// Attribut\nexport const timeState = (state) => state.timer.time;\nexport const isEndGame = (state) => state.timer.endGame;\n\nexport default timerSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { makeRandomNumber, multiply } from \"math-game-function\";\nimport { decremente, initInternval, initTime } from \"./timer\";\n\nexport const operationSlice = createSlice({\n  name: \"operations\",\n  initialState: {\n    all: [],\n    isEmpty: true,\n    score: 0,\n  },\n  reducers: {\n    startOperation: (state) => {\n      state.isEmpty = false;\n      state.score = 0;\n      state.all = [operation()];\n      \n    },\n    addOperation: (state) => {\n      state.all = [operation(), ...state.all];\n    },\n    responseIsSuccess: (state) => {\n      state.score++;\n      state.all[0].success = true;\n    },\n    responseIsFail: (state) => {\n      state.score--;\n    },\n  },\n});\n\nexport function operation() {\n  const nb1 = makeRandomNumber();\n  const nb2 = makeRandomNumber();\n  return {\n    success: false,\n    nb1: nb1,\n    nb2: nb2,\n    response: multiply(nb1, nb2),\n    text: `${nb1} x ${nb2} = `,\n  };\n}\n\nexport const {\n  startOperation,\n  addOperation,\n  end,\n  responseIsSuccess,\n  responseIsFail,\n} = operationSlice.actions;\n\nexport const operationsState = (state) => state.operations;\nexport const isEndGame = (state) => state.operations.endGame;\nexport const getFirstResponse = (state) => {\n  const size = state.operations.all.length;\n  return size !== 0 ? state.operations.all[0].response : undefined;\n};\nexport const start = () => (dispatch) => {\n  dispatch(initTime());\n  dispatch(startOperation());\n  dispatch(initInternval(setInterval(() => dispatch(decremente()), 1000)));\n}\n\nexport default operationSlice.reducer;\n","import React from \"react\";\nimport { operationsState } from \"../stores/operations\";\nimport { useSelector } from \"react-redux\";\nimport { isEndGame } from \"../stores/timer\";\nimport \"./ListOfOperations.scss\";\n\nfunction ListOfOperations() {\n  const { all } = useSelector(operationsState);\n  const isEnd = useSelector(isEndGame);\n\n  function attributClass(operation, index) {\n    if (index === 0 && isEnd) return \"hidden\";\n    if (index === 0) return \"first-operation\";\n    return operation.success ? \"success\" : \"fail\";\n  }\n  return (\n    <ul className=\"ListOfOperations\">\n      <li className={!isEnd ? \"hidden\" : \"show-response\"}>\n        Fin de la partie !!!\n      </li>\n      {all.map((operation, index) => (\n        <li\n          key={index}\n          className={`${attributClass(operation, index)} ${\n            isEnd ? \"show-response\" : \"\"\n          }`}\n        >\n          {operation.text}\n          {operation.success ? operation.response : \"?\"}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ListOfOperations;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { timeState } from \"../stores/timer\";\nimport { operationsState } from \"../stores/operations\";\n\nfunction Score() {\n  const operations = useSelector(operationsState);\n\n  return (\n    <div>{`Temps: ${useSelector(timeState)}s | Score: ${\n      operations.score\n    }`}</div>\n  );\n}\n\nexport default Score;\n","import React, { useState, createRef } from \"react\";\nimport {\n  getFirstResponse,\n  addOperation,\n  responseIsSuccess,\n  responseIsFail,\n} from \"../stores/operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Score from \"./Score\";\nimport \"./RightPanelForm.scss\";\n\nfunction RightPanelForm() {\n  const textInput = createRef();\n  const firstResponse = useSelector(getFirstResponse);\n  const dispatch = useDispatch();\n\n  function response(event) {\n    event.preventDefault();\n    textInput.current.focus();\n    const resultNumber = parseInt(result);\n    if (firstResponse === resultNumber) {\n      dispatch(responseIsSuccess());\n    } else {\n      dispatch(responseIsFail());\n    }\n    dispatch(addOperation());\n    setresult(\"\");\n  }\n  function checkResultUser(event) {\n    let resultNumber = event.target.value;\n    if (resultNumber >= 0 && resultNumber <= 81) setresult(resultNumber);\n  }\n\n  const [result, setresult] = useState(\"\");\n\n  return (\n    <form className=\"RightPanelForm\" onSubmit={response}>\n      <input\n        type=\"number\"\n        step=\"1\"\n        min=\"0\"\n        max=\"81\"\n        name=\"response\"\n        autoFocus\n        autoComplete=\"off\"\n        ref={textInput}\n        onChange={checkResultUser}\n        value={result}\n      />\n      <label htmlFor=\"valid\">\n        <input name=\"valid\" type=\"submit\" value=\"Validé\" />\n      </label>\n      <p>ou appuyer sur ENTRER</p>\n      <Score />\n    </form>\n  );\n}\n\nexport default RightPanelForm;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport Axios from \"axios\";\nimport { start } from \"./operations\";\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: undefined,\n    isLoading: false,\n    pseudo: undefined,\n    score: undefined,\n  },\n  reducers: {\n    usersLoading(state) {\n      state.loading = true;\n      console.log(\"action\");\n    },\n    usersReceived(state, { payload: { id, pseudo } }) {\n      state.loading = false;\n      state.pseudo = pseudo;\n      state.id = id;\n      console.log({ id, pseudo } );\n    },\n  },\n});\n\nexport const { usersLoading, usersReceived } = userSlice.actions;\nexport const userState = (state) => state.user;\n\nexport const fetchUsers = (pseudo) => async (dispatch) => {\n  dispatch(usersLoading());\n  const { status, data } = await Axios.post(\"/users\", { pseudo });\n  if (status !== 200) return;\n  dispatch(usersReceived({ ...data, pseudo }));\n  dispatch(start(pseudo));\n\n};\n\nexport default userSlice.reducer;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Score from \"./Score\";\nimport \"./StartGame.scss\";\nimport { fetchUsers, userState } from \"../stores/user\";\nimport { useSelector } from \"react-redux\";\n\n\nfunction StartGame() {\n  const dispatch = useDispatch();\n  const [pseudo, setPseudo] = useState(\"\");\n  const user = useSelector(userState);\n\n  function launchGame(event) {\n    event.preventDefault();\n    dispatch(fetchUsers(pseudo));\n    console.log(user)\n  }\n\n  return (\n    <form className=\"StartGame\" onSubmit={(event) => launchGame(event)}>\n      <label htmlFor=\"pseudo\">\n        <input\n          type=\"text\"\n          onChange={(event) => setPseudo(event.target.value)}\n          value={pseudo}\n          name=\"pseudo\"\n          maxLength=\"30\"\n          required\n        />\n      </label>\n      <label htmlFor=\"start\">\n        <input\n          name=\"start\"\n          type=\"submit\"\n          value=\"Démarrer\"\n          disabled={pseudo.trim().length === 0}\n        />\n      </label>\n      <Score />\n    </form>\n  );\n}\n\nexport default StartGame;\n","import React, { Component } from \"react\";\n\nclass InfoGameStart extends Component {\n  render() {\n    return (\n      <div>\n        <dl>\n          <dt>Révision des tables de multiplaction</dt>\n          <dd>\n            Les règles sont simples, une foi que vous avez rentré votre surnom,\n            vous cliquez sur Démarrer.\n          </dd>\n          <dd>\n            Vous avez 30 secondes pour répondre le plus vite possible à ces\n            multiplications. Chaque bonnes réponses vous donne 1 point et chaque\n            erreur vous enlève 1 point.\n          </dd>\n          <dd>Les chiffres sont aléatoirs entre 0 et 9</dd>\n        </dl>\n      </div>\n    );\n  }\n}\n\nexport default InfoGameStart;\n","import React from \"react\";\nimport \"./App.scss\";\nimport ListOfOperations from \"./components/ListOfOperations\";\nimport RightPanelForm from \"./components/RightPanelForm\";\nimport StartGame from \"./components/StartGame\";\nimport { useSelector } from \"react-redux\";\nimport InfoGameStart from \"./components/InfoGameStart\";\nimport { operationsState } from \"./stores/operations\";\nimport { isEndGame } from \"./stores/timer\";\nimport packageJson from \"../package.json\";\n\nfunction App() {\n  const operations = useSelector(operationsState);\n  const isEnd = useSelector(isEndGame);\n\n  return (\n    <div className=\"App\">\n      <h1>Math game</h1>\n      <a data-testid=\"link-me\" href={packageJson.author.url}>\n        <i>By FJULIEN</i>\n      </a>\n      <div className=\"container\">\n        <article>\n          {operations.isEmpty ? <InfoGameStart /> : <ListOfOperations />}\n        </article>\n        <div className=\"separation\"></div>\n        <article>\n          {operations.isEmpty || isEnd ? <StartGame /> : <RightPanelForm />}\n        </article>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport operationSlice from \"./operations\";\r\nimport userSlice from \"./user\";\r\nimport timerSlice from \"./timer\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    operations: operationSlice,\r\n    timer: timerSlice,\r\n    user: userSlice,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport store from \"./stores/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport packageJson from \"../package.json\";\nimport { defaults } from \"axios\";\n\ndefaults.baseURL =\n  process.env.BUILD_ENV === \"production\"\n    ? packageJson.homepage\n    : packageJson.devUrl.node + \"api/\";\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
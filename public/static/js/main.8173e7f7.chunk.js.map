{"version":3,"sources":["stores/operations.js","stores/timer.js","components/ListOfOperations.jsx","components/RightPanelForm.jsx","components/StartGame.jsx","components/InfoGameStart.jsx","App.js","stores/store.js","serviceWorker.js","index.js"],"names":["operationSlice","createSlice","name","initialState","all","isEmpty","score","reducers","start","state","action","operation","addOperation","responseIsSuccess","success","responseIsFail","extraReducers","nb1","makeRandomNumber","nb2","response","multiply","text","actions","end","operationsState","operations","getFirstResponse","length","undefined","timerSlice","time","interval","endGame","decremente","clearInterval","initInternval","payload","initTime","timeState","timer","isEndGame","ListOfOperations","useSelector","isEnd","attributClass","index","className","map","key","RightPanelForm","dispatch","useDispatch","firstResponse","useState","result","setresult","onSubmit","event","preventDefault","resultNumber","parseInt","type","autoFocus","autoComplete","onChange","target","value","StartGame","onClick","setInterval","InfoGameStart","Component","App","data-testid","href","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8173e7f7.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { makeRandomNumber, multiply } from \"math-game-function\";\n\nexport const operationSlice = createSlice({\n  name: \"operations\",\n  initialState: {\n    all: [],\n    isEmpty: true,\n    score: 0,\n  },\n  reducers: {\n    start: (state, action) => {\n      state.isEmpty = false;\n      state.score = 0;\n      state.all = [operation()];\n    },\n    addOperation: (state) => {\n      state.all = [operation(), ...state.all];\n    },\n    responseIsSuccess: (state) => {\n      state.score++;\n      state.all[0].success = true;\n    },\n    responseIsFail: (state) => {\n      state.score--;\n    },\n  },\n  extraReducers: {},\n});\n\nexport function operation() {\n  const nb1 = makeRandomNumber();\n  const nb2 = makeRandomNumber();\n  return {\n    success: false,\n    nb1: nb1,\n    nb2: nb2,\n    response: multiply(nb1, nb2),\n    text: `${nb1} x ${nb2} = `,\n  };\n}\n// Methode\nexport const {\n  start,\n  addOperation,\n  end,\n  responseIsSuccess,\n  responseIsFail,\n} = operationSlice.actions;\n\n// Attribut\nexport const operationsState = (state) => state.operations;\nexport const isEndGame = (state) => state.operations.endGame;\nexport const getFirstResponse = (state) => {\n  const size = state.operations.all.length;\n  return size !== 0 ? state.operations.all[0].response : undefined;\n};\n\nexport default operationSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst TIME_GAME = 30;\n\nexport const timerSlice = createSlice({\n  name: \"timer\",\n  initialState: {\n    time: TIME_GAME,\n    interval: undefined,\n    endGame: false,\n  },\n  reducers: {\n    decremente: (state) => {\n      if (state.time > 0) {\n        state.time--;\n      } else {\n        state.endGame = true;\n        clearInterval(state.interval);\n      }\n    },\n    initInternval: (state, action) => {\n      state.interval = action.payload;\n    },\n    initTime: (state) => {\n      state.endGame = false;\n      state.time = TIME_GAME;\n    },\n  },\n  extraReducers: {},\n});\n\n// Methode\nexport const { decremente, initInternval, initTime } = timerSlice.actions;\n\n// Attribut\nexport const timeState = (state) => state.timer.time;\nexport const isEndGame = (state) => state.timer.endGame;\n\nexport default timerSlice.reducer;\n","import React from \"react\";\nimport { operationsState } from \"../stores/operations\";\nimport { useSelector } from \"react-redux\";\nimport { isEndGame } from \"../stores/timer\";\n\nfunction ListOfOperations() {\n  const { all } = useSelector(operationsState);\n  const isEnd = useSelector(isEndGame);\n\n  function attributClass(operation, index) {\n    if (index === 0 && isEnd) return \"hidden\";\n    if (index === 0) return \"first-operation\";\n    return operation.success ? \"success\" : \"fail\";\n  }\n  return (\n    <ul>\n      <li className={!isEnd ? \"hidden\" : \"\"}>End Game !!!</li>\n      {all.map((operation, index) => (\n        <li key={index} className={attributClass(operation, index)}>\n          {operation.text}\n          {operation.success ? operation.response : \"?\"}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ListOfOperations;\n","import React, { useState } from \"react\";\nimport {\n  getFirstResponse,\n  addOperation,\n  responseIsSuccess,\n  responseIsFail,\n} from \"../stores/operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nfunction RightPanelForm() {\n  const dispatch = useDispatch();\n  const firstResponse = useSelector(getFirstResponse);\n  function response(event) {\n    event.preventDefault();\n    const resultNumber = parseInt(result);\n    if (firstResponse === resultNumber) {\n      dispatch(responseIsSuccess());\n    } else {\n      dispatch(responseIsFail());\n    }\n    dispatch(addOperation());\n    setresult(\"\");\n  }\n  function checkResultUser(event) {\n    let resultNumber = event.target.value;\n    if (resultNumber >= 0 && resultNumber <= 81) setresult(resultNumber);\n  }\n\n  const [result, setresult] = useState(\"\");\n\n  return (\n    <form onSubmit={response}>\n      <input\n        type=\"text\"\n        name=\"response\"\n        autoFocus\n        autoComplete=\"off\"\n        onChange={checkResultUser}\n        value={result}\n      />\n      <input type=\"submit\" /> or press ENTER\n    </form>\n  );\n}\n\nexport default RightPanelForm;\n","import React from \"react\";\nimport { start } from \"../stores/operations\";\nimport { decremente, initInternval, initTime } from \"../stores/timer\";\nimport { useDispatch } from \"react-redux\";\n\nfunction StartGame() {\n  const dispatch = useDispatch();\n  function launchGame() {\n    dispatch(start());\n    dispatch(initTime());\n    dispatch(initInternval(setInterval(() => dispatch(decremente()), 1000)));\n  }\n\n  return (\n    <div>\n      <button onClick={() => launchGame()}>Start</button>\n    </div>\n  );\n}\n\nexport default StartGame;\n","import React, { Component } from 'react';\n\nclass InfoGameStart extends Component {\n    render() {\n        return (\n            <div>\n                <p>Are you ready???</p>\n            </div>\n        );\n    }\n}\n\nexport default InfoGameStart;\n","import React from \"react\";\nimport \"./App.scss\";\nimport ListOfOperations from \"./components/ListOfOperations\";\nimport RightPanelForm from \"./components/RightPanelForm\";\nimport StartGame from \"./components/StartGame\";\nimport { useSelector } from \"react-redux\";\nimport InfoGameStart from \"./components/InfoGameStart\";\nimport { operationsState } from \"./stores/operations\";\nimport { timeState, isEndGame } from \"./stores/timer\";\n\nfunction App() {\n  const operations = useSelector(operationsState);\n  const isEnd = useSelector(isEndGame);\n\n  return (\n    <div className=\"App\">\n      <h1>Math game</h1>\n      <a data-testid=\"link-me\" href=\"https://github.com/fjulien\">\n        <i>By FJULIEN</i>\n      </a>\n      <div className=\"container\">\n        <article>\n          {operations.isEmpty ? <InfoGameStart /> : <ListOfOperations />}\n        </article>\n        <div className=\"separation\"></div>\n        <article>\n          {operations.isEmpty || isEnd ? <StartGame /> : <RightPanelForm />}\n        </article>\n      </div>\n      <div>{`Temps: ${useSelector(timeState)}s | Score: ${\n        operations.score\n      }`}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport operationSlice from \"./operations\";\r\nimport timerSlice from \"./timer\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    operations: operationSlice,\r\n    timer: timerSlice,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport store from \"./stores/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}